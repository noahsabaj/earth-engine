//! Bridge between Rust GPU types and WGSL shader code

use crate::gpu::types::terrain::MAX_BLOCK_DISTRIBUTIONS;

/// Generate WGSL type definitions from Rust types
/// 
/// This will be called by the build script to generate WGSL files
pub fn generate_terrain_wgsl() -> String {
    format!(r#"// AUTO-GENERATED - DO NOT EDIT
// Generated from Rust GPU type definitions

// Maximum number of block distributions (must match Rust)
const MAX_BLOCK_DISTRIBUTIONS: u32 = {}u;

// Generic block distribution rule
struct BlockDistribution {{
    block_id: u32,
    min_height: i32,
    max_height: i32,
    probability: f32,
    noise_threshold: f32,
    // Padding automatically handled by encase
    _padding: array<u32, 7>,  // 28 bytes to reach 48 total
}}

// Terrain generation parameters
struct TerrainParams {{
    seed: u32,
    sea_level: f32,
    terrain_scale: f32,
    mountain_threshold: f32,
    cave_threshold: f32,
    num_distributions: u32,
    _padding: vec2<u32>,
    distributions: array<BlockDistribution, MAX_BLOCK_DISTRIBUTIONS>,
}}
"#, MAX_BLOCK_DISTRIBUTIONS)
}

/// Generate all WGSL type definitions
pub fn generate_all_wgsl_types() -> String {
    let mut wgsl = String::new();
    
    // Add header
    wgsl.push_str("// AUTO-GENERATED GPU TYPE DEFINITIONS\n");
    wgsl.push_str("// Generated by Hearth Engine build system\n\n");
    
    // Add terrain types
    wgsl.push_str(&generate_terrain_wgsl());
    wgsl.push_str("\n");
    
    // Future additions:
    // wgsl.push_str(&generate_lighting_wgsl());
    // wgsl.push_str(&generate_physics_wgsl());
    // wgsl.push_str(&generate_particle_wgsl());
    
    wgsl
}

/// Get the path where generated WGSL should be saved
pub fn generated_wgsl_path() -> &'static str {
    "src/gpu/shaders/generated/types.wgsl"
}